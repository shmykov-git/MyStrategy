									Visit you tube chanel to watch some results during development process
									https://www.youtube.com/channel/UC5msXAnEpFqnwmZPHS3hkMw


The World:
Scene - The game world
Clan - units separation - who is my friend and who is my enemy
Unit - the only game active unit. This is simplification for this first development phase (It should work somehow, that is it)
       It can be mach more complex and have oop structure, but not now
UnitRound - It renews each step to default state for each Unit
Act - everything units can do
Act.Do - game iteration (step) All units should do something at the step
Act.Clean - something like dispose - clean all the act sub actions

World performance optimization:
SceneNet - This is additional world structure for world performance
           You cannot iterate 10 000 units per 20 milliseconds, but you can take only 50 of them from
		   Node and it's neighbors and 20ms will be anought for you. This is the main game optimization to be able to get many Units to the world	
		   The world is separated to Nodes - this is first level separation (50 x 50 pixels for example)
Node	 - Small pease of the world to perform havy operations for nearest units - pathfinding and others       
		   The Node alse separtes the world small part to another smallest parts (10 x 10 pixels for example, there are 25 sub nodes inside the Node)


How acts work:
Any Unit has all his acts. This is the only place of the unit acts.
Any Act is responsible for some simple operation:
	FindAndMoveToAttack - the unit is looking for any enemy and as soon it is found he goes to it, but...
	  to be able to go this Act adds another one Act - MoveToAtack. If you add somethign then you are responsible to delete it (except spectial Act - Kill)
	MoveToAttack - this is pathfind act. It has to find the path to the enemy and moves the unit untile it comes
	 then it add another one Act AttackEnemy - this is another one respose
	AttackEnemy - process of attacking and then the last one Act - Kill
	Kill - clear everything for the killed unit: unit acts, acts performing with the unit. The unit is deactivated after the kill is completed
The main thing of the acts - you can write as match as you need for any simple or complex game logic
You can write something like AtackEnemyButSeparateUitsWhenBallCames. You will have a lot of game actions for any unit.

Viewer - you can use any engine you know (unity, monogame...)
Take the interface, write models (2d, 3d). The world is designed as 2d, but it can get Z cood and you can show it in 3d
It is the most simple harcode viewer writed on wpf (the worst performance architected). But you can see the world (for free...)

Math:
Vector - 2d float world vector 
Index - 2d integer position structure

How units move:
some correction processes - just do not intersect the units (simplest solution)
the pathfinding is very complicated and is under consstruction now...

